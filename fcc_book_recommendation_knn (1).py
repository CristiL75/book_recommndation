# -*- coding: utf-8 -*-
"""fcc_book_recommendation_knn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/freeCodeCamp/boilerplate-book-recommendation-engine/blob/master/fcc_book_recommendation_knn.ipynb
"""

# import libraries (you may add additional imports but you may not have to)
import numpy as np
import pandas as pd
from scipy.sparse import csr_matrix
from sklearn.neighbors import NearestNeighbors
import matplotlib.pyplot as plt

# get data files
!wget https://cdn.freecodecamp.org/project-data/books/book-crossings.zip

!unzip book-crossings.zip

books_filename = 'BX-Books.csv'
ratings_filename = 'BX-Book-Ratings.csv'

# import csv data into dataframes
df_books = pd.read_csv(
    books_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['isbn', 'title', 'author'],
    usecols=['isbn', 'title', 'author'],
    dtype={'isbn': 'str', 'title': 'str', 'author': 'str'})

df_ratings = pd.read_csv(
    ratings_filename,
    encoding = "ISO-8859-1",
    sep=";",
    header=0,
    names=['user', 'isbn', 'rating'],
    usecols=['user', 'isbn', 'rating'],
    dtype={'user': 'int32', 'isbn': 'str', 'rating': 'float32'})

# add your code here - consider creating a new cell for each section of code
df = pd.merge(df_ratings, df_books, on = 'isbn')

user_counts = df['user'].value_counts()
df = df[df['user'].isin(user_counts[user_counts >= 200]. index)]

books_counts = df['title'].value_counts()
df = df[df['title'].isin(books_counts[books_counts >= 100].index)]

#create a pivot table
book_user_matrix = df.pivot_table(index = 'title', columns = 'user', values = 'rating').fillna(0)

# convert the pivot table to a sparse matrix for efficient calculation

book_user_matrix_sparse = csr_matrix(book_user_matrix)

#train the k nearest neighbors model

model = NearestNeighbors(metric = 'cosine', algorithm = 'brute')
model.fit(book_user_matrix_sparse)

def get_recommends(book=""):
    # Find the index of the book in the matrix
    book_index = book_user_matrix.index.get_loc(book)

    # Get distances and indices of nearest neighbors
    distances, indices = model.kneighbors(book_user_matrix.iloc[book_index, :].values.reshape(1, -1), n_neighbors=6)

    # Get the recommended books
    recommended_books = []
    for i in range(1, len(distances.flatten())):
        recommended_books.append([book_user_matrix.index[indices.flatten()[i]], distances.flatten()[i]])

    # Format the output
    return [book, recommended_books]

books = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
print(books)

def test_book_recommendation():
  test_pass = True
  recommends = get_recommends("Where the Heart Is (Oprah's Book Club (Paperback))")
  if recommends[0] != "Where the Heart Is (Oprah's Book Club (Paperback))":
    test_pass = False
  recommended_books = ["I'll Be Seeing You", 'The Weight of Water', 'The Surgeon', 'I Know This Much Is True']
  recommended_books_dist = [0.8, 0.77, 0.77, 0.77]
  for i in range(2):
    if recommends[1][i][0] not in recommended_books:
      test_pass = False
    if abs(recommends[1][i][1] - recommended_books_dist[i]) >= 0.05:
      test_pass = False
  if test_pass:
    print("You passed the challenge! 🎉🎉🎉🎉🎉")
  else:
    print("You haven't passed yet. Keep trying!")

test_book_recommendation()